功能:
  1. 生成文件
  2. 读取配置
    * 每个插件可注册若干个配置对象
    * 以配置对象为基本单位而非插件(比如,重载插件时,可能部分配置对象读取成功,部分读取失败)
    * 读取配置中,出异常不用处理直接抛出,会被包裹在外面的方法处理

<用例一>
使用生成与读取功能
1. 先注册生成配置
2. 再一个个注册读取配置(在注册后,会马上自动进行读取一次)

<用例二>
使用生成功能
1. 先注册生成配置
2. 随时可以调用方法来生成配置

<用例三>
使用读取功能
1. 先确保需要的文件已经存在
2. 再一个个注册读取配置

比较?
有几十个插件,每个插件有几十上百行配置,每个插件都有类似的读取配置文件代码.
为了更好地对错误的配置进行提示,很多配置读取后都进行类似的上下限检测与错误提示.

好处?
1. 直观
2. 简便,重复的代码量减少
3. 提示,更加完备统一的错误提示
4. 重载: 安全方便!如果配置有问题导致重载出错,会保留旧的配置